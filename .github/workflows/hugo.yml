name: Deploy Hugo Site to GitHub Pages

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.148.2
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install Dart Sass (Direct Binary)
        run: |
          # Use a specific version for reproducible builds
          SASS_VERSION="1.90.0"
          # Download the tarball
          wget https://github.com/sass/dart-sass/releases/download/${SASS_VERSION}/dart-sass-${SASS_VERSION}-linux-x64.tar.gz
          # Extract it
          tar -xf dart-sass-${SASS_VERSION}-linux-x64.tar.gz
          # Add the executable to the GitHub Actions path for subsequent steps
          echo "${PWD}/dart-sass" >> $GITHUB_PATH
      - name: Check Sass version # Optional: verify the installation
        run: sass --version
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Check for Hugo files and set working directory
        id: hugo-check
        run: |
          if [ -f "nshkr-site/config.yaml" ] || [ -f "nshkr-site/config.yml" ] || [ -f "nshkr-site/config.toml" ] || [ -f "nshkr-site/hugo.toml" ]; then
            echo "hugo_dir=nshkr-site" >> $GITHUB_OUTPUT
            echo "Hugo site found in nshkr-site/ directory"
          elif [ -f "config.yaml" ] || [ -f "config.yml" ] || [ -f "config.toml" ] || [ -f "hugo.toml" ]; then
            echo "hugo_dir=." >> $GITHUB_OUTPUT
            echo "Hugo site found in root directory"
          else
            echo "ERROR: No Hugo config file found!"
            exit 1
          fi
      - name: Install Node.js dependencies
        working-directory: ${{ steps.hugo-check.outputs.hugo_dir }}
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Build with Hugo
        working-directory: ${{ steps.hugo-check.outputs.hugo_dir }}
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./${{ steps.hugo-check.outputs.hugo_dir }}/public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

